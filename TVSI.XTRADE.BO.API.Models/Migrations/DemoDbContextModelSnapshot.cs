// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TVSI.XTRADE.BO.API.Models.Entities.Demo;

#nullable disable

namespace TVSI.XTRADE.BO.API.Models.Migrations
{
    [DbContext(typeof(DemoDbContext))]
    partial class DemoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TVSI.XTRADE.BO.API.Models.Entities.Demo.ErrorCode", b =>
                {
                    b.Property<string>("ErrCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Channel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrMsgEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrMsgVi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ErrCode");

                    b.ToTable("ErrorCodes");

                    b.HasData(
                        new
                        {
                            ErrCode = "-99999",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8364),
                            Descriptions = "",
                            ErrMsgEn = "Transactions failed. Please contact customer service.",
                            ErrMsgVi = "Giao dịch thất bại. Vui lòng liên hệ bộ phận chăm sóc khách hàng."
                        },
                        new
                        {
                            ErrCode = "1",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8402),
                            Descriptions = "",
                            ErrMsgEn = "Success.",
                            ErrMsgVi = "Thành công."
                        },
                        new
                        {
                            ErrCode = "69901",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8421),
                            Descriptions = "",
                            ErrMsgEn = "Account has been locked.",
                            ErrMsgVi = "Tài khoản đã bị khóa."
                        },
                        new
                        {
                            ErrCode = "69902",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8439),
                            Descriptions = "",
                            ErrMsgEn = "Login information is incorrect.",
                            ErrMsgVi = "Thông tin đăng nhập không đúng."
                        },
                        new
                        {
                            ErrCode = "69903",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8456),
                            Descriptions = "",
                            ErrMsgEn = "Not allowed to access application.",
                            ErrMsgVi = "Người dùng không có quyền truy cập ứng dụng."
                        },
                        new
                        {
                            ErrCode = "69904",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8473),
                            Descriptions = "",
                            ErrMsgEn = "Not allowed to access action.",
                            ErrMsgVi = "Người dùng không có quyền truy cập hành đông."
                        },
                        new
                        {
                            ErrCode = "69905",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8490),
                            Descriptions = "",
                            ErrMsgEn = "Token is required.",
                            ErrMsgVi = "Thông tin Token là bắt buộc."
                        },
                        new
                        {
                            ErrCode = "69906",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8508),
                            Descriptions = "",
                            ErrMsgEn = "Token not found.",
                            ErrMsgVi = "Không tìm thấy thông tin Token."
                        },
                        new
                        {
                            ErrCode = "69907",
                            Active = true,
                            Channel = "ALL",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 19, 46, 298, DateTimeKind.Local).AddTicks(8525),
                            Descriptions = "",
                            ErrMsgEn = "Token invalid.",
                            ErrMsgVi = "Thông tin Token không đúng."
                        });
                });

            modelBuilder.Entity("TVSI.XTRADE.BO.API.Models.Entities.Demo.LogLogin", b =>
                {
                    b.Property<long>("LogLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogLoginId"), 1L, 1);

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Channel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Engine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogLoginId");

                    b.ToTable("LogLogins");
                });

            modelBuilder.Entity("TVSI.XTRADE.BO.API.Models.Entities.Demo.RefreshToken", b =>
                {
                    b.Property<long>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RefreshTokenId"), 1L, 1);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TVSI.XTRADE.BO.API.Models.Entities.Demo.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            Address = "Vietnam",
                            Email = "demo@netcore.com",
                            Password = "FE-01-CE-2A-7F-BA-C8-FA-FA-ED-7C-98-2A-04-E2-29",
                            Phone = "0123456789",
                            Pin = "1234",
                            Username = "demo"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
